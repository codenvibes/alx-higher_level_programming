# Auth: Terrence M.K
# File: 1-my_list.txt

※※※※※※※※※※※※※※※※※※※※※※※※

How to Use the 1-my_list.py module.

※※※※※※※※※※※※※※※※※※※※※※※※

This documentation provides usage examples for the module "1-my_list.py" which defines a class called "MyList" that inherits from the built-in
"list" class.

※※※※※※※※※※※※※※※※※※※※※※※※

**Instantiation**
※※※※※※※※※※※※※※※※※※※※※※※※

"Instantiating" is the process of creating objects (instances) based on a class's blueprint or definition. Each instance has its own set of attributes and can perform actions defined by the class's methods. ~ CHATGPT

In this example, MyList() is the constructor for the MyList class, and it is used to create a new instance of the MyList class. The newly created object is assigned to the variable my_list, making it an instance of the MyList class.

You can instantiate the "MyList" class in several ways:
1. **Empty Initialization:**
   When "MyList" is instantiated with no arguments, it returns an empty list.

::

    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>
    >>> print(my_list)
    []


2. **Initialization with an Iterable:**
   You can also instantiate "MyList" by providing a single argument, which should be an iterable object (e.g., a list or tuple).

::

    >>> my_list = MyList([1, 2, 3])
    >>> print(my_list)
    [1, 2, 3]

   If you provide "None" or more than one argument during instantiation, a "TypeError" will be raised.

::

    >>> my_list = MyList(None)
    Traceback (most recent call last):
    TypeError: 'NoneType' object is not iterable

::

    >>> my_list = MyList([1, 2], [3, 4])
    Traceback (most recent call last):
    TypeError: list() takes at most 1 argument (2 given)


**Usage**
※※※※※※※※※※※※※※※※※※※※※※※※

"MyList" inherits the methods of the built-in "list" class. You can use these methods to manipulate and work with "MyList" objects.

1. **Append Elements:**
   You can add elements to a "MyList" using the "append()" method.

::

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> print(my_list)
    [1, 2, 3]


2. **Replace Elements with Indexing:**

::

    >>> my_list[0] = 5
    >>> print(my_list)
    [5, 2, 3]


3. **Remove Elements:**

::

    >>> my_list.remove(5)
    >>> print(my_list)
    [2, 3]

"MyList" supports other built-in methods available for Python lists. You can refer to the Python list documentation for more details.


**"print_sorted" Method**
※※※※※※※※※※※※※※※※※※※※※※※※

"MyList" defines a single Public instance method called "print_sorted(self)".

1. **Method Signature:**
   The method takes no arguments. If you provide an argument, a "TypeError" will be raised.

::
    >>> my_list = MyList()
    >>> my_list.print_sorted(1)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given


2. **Sorting Elements:**
   The "print_sorted()" method prints the list in ascending sorted order without altering the original list.

::

    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]


3. **Lexicographical Sorting for Strings:**
    If the list contains strings, they will be sorted lexicographically.

::

    >>> my_list = MyList()
    >>> my_list.append("Apple")
    >>> my_list.append("Banana")
    >>> my_list.append("Cherry")
    >>> my_list.append("Grape")
    >>> my_list.append("Orange")
    >>> print(my_list)
    ['Apple', 'Banana', 'Cherry', 'Grape', 'Orange']
    >>> my_list.print_sorted()
    ['Banana', 'Apple', 'Cherry', 'Grape', 'Orange']


4. **Handling Empty Lists:**
   If the list is empty, "print_sorted()" will return an empty list.

::

    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []


5. **Type Error for Incompatible Types:**
   If the list contains elements of different types that cannot be compared, a "TypeError" will be raised.

::

    >>> my_list = MyList([1, "Betty", "Holberton", 5])
    >>> my_list.print_sorted()
    Traceback (most recent call last):
    TypeError: unorderable types: str() < int()
